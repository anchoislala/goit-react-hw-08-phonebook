{"version":3,"file":"static/js/845.3084348d.chunk.js","mappings":"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","sources":["components/Box/Box.js","components/ContactsItem/ContactsItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import Box from '@mui/material/Box';\n\nexport default function BoxSx({ children }) {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        padding: 5,\n        textAlign: 'center',\n        margin: 'auto',\n        marginTop: 5,\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 500,\n        height: 300,\n        backgroundColor: 'primary.dark',\n        borderRadius: 8,\n        '&:hover': {\n          backgroundColor: 'yellow',\n        },\n      }}\n    >\n      {children}\n    </Box>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { Button } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\n\nconst ContactsItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const { id, name, number } = contact;\n  return (\n\n    <ListItem key={id}>\n      <ListItemAvatar>\n        <Avatar>\n          <ContactPhoneIcon />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText primary={name} secondary={number} />\n      <Button\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n        variant=\"outlined\"\n        startIcon={<DeleteIcon />}>\n        Delete\n      </Button>\n    </ListItem>\n    \n  );\n};\n\nContactsItem.propTypes = {\n  contact: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n   }),\n};\n\nexport default ContactsItem;","import List from '@mui/material/List';\n\nexport default function FolderList({children}) {\n  return (\n    <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper', margin: 'auto'}}>\n          {children}\n    </List>\n  );\n}","import PropTypes from 'prop-types';\nimport ContactsItem from '../ContactsItem';\nimport FolderList from \"./ContactList.styled\";\n\nconst ContactList = ({ contacts }) => (\n    <FolderList>\n        {contacts.map(({ id, name, number }) => (\n            <ContactsItem\n                key={id}\n                contact={{ id, name, number }} />\n        ))}\n    </FolderList>\n);\n\nContactList.propTypes = {\n    contacts: PropTypes.array.isRequired,\n};\n\nexport default ContactList;\n\n\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Label = styled.label`\n    display: flex;\n    align-items: center;\n    font-size: 30px;\n    margin-bottom: 10px;\n    justify-content: space-between;\n`;\n\nexport const InfoInput = styled(Field)`\n    margin-left: 20px;\n    font-size: 25px;\n    padding: 5px 5px;\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    box-sizing: border-box;\n    border-radius: 4px;\n    cursor: pointer;\n    outline: none;\n\n    &:focus {\n    border-color: #2196f3;\n    transition-property: border-color;\n    transition-duration: 250ms;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const InfoForm = styled(Form)`\n    display: grid;\n`;\n\nexport const ErrorInfo = styled(ErrorMessage)`\n    margin-left: 10px;\n    font-size: 15px;\n    color: red;\n`;","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Label, InfoInput, InfoForm, ErrorInfo } from \"./ContactForm.styled\";\nimport PropTypes from 'prop-types';\nimport { Button } from '@mui/material';\nimport PersonAddAlt1Icon from '@mui/icons-material/PersonAddAlt1';\nimport BoxSx from \"components/Box/Box\";\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.number().required(),\n})\n\nconst initialValues = {\n    name: '',\n    number: '',\n}\n\nconst ContactForm = ({ onSubmit }) => {\n\n    const handleSubmit = (values, { resetForm }) => {\n\n        onSubmit(values);\n        resetForm();\n    };\n\n    return (\n        <BoxSx>\n            <Formik\n                initialValues={initialValues}\n                onSubmit={handleSubmit}\n                validationSchema={schema}\n            >\n                <InfoForm autoComplete=\"off\">\n\n                    <Label htmlFor='name'>Name\n                        <InfoInput type=\"text\" name=\"name\" />\n                        <ErrorInfo name=\"name\" component='div' />\n                    </Label>\n\n                    <Label htmlFor='number'>Number\n                        <InfoInput type=\"tel\" name=\"number\" />\n                        <ErrorInfo name=\"number\" component='div' />\n                    </Label>\n\n                    <Button type=\"submit\" variant=\"contained\" endIcon={<PersonAddAlt1Icon />}>\n                        Add contact\n                    </Button>\n                    \n                </InfoForm>\n            </Formik>\n        </BoxSx>\n    );\n};\n\nContactForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;","import styled from '@emotion/styled';\n\nexport const FilterBox = styled.div`\n    margin: 15px 0px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 30px;\n`;","import PropTypes from 'prop-types';\nimport { FilterBox } from \"./Filter.styled\";\nimport { TextField } from \"@mui/material\";\n\nconst Filter = ({ value, onChange }) => (\n    <FilterBox>\n        <TextField variant=\"outlined\" label=\"Find contact by name\" type='text' value={value} onChange={onChange} />\n    </FilterBox>\n);\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { contactsSelectors } from \"redux/contacts\";\nimport { fetchContacts, addContact } from \"redux/contacts\"; \nimport { Helmet } from \"react-helmet\";\nimport { updateFiter } from \"redux/contacts/contactsActions\";\nimport ContactList from \"components/ContactList\";\nimport ContactForm from \"components/ContactForm\";\nimport Filter from \"components/Filter\";\n\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n    const contacts = useSelector(contactsSelectors.getAllContacts);\n    const filteredContacts = useSelector(contactsSelectors.getVisibleContacts);\n    const filter = useSelector(contactsSelectors.getFilter);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n\n    const formSubmitHandler = data => {\n\n        const { name, number } = data;\n        const contact = {\n            name,\n            number,\n        }\n\n        const nameExists = contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n        if (nameExists) {\n            alert(`${name} is already in contacts.`)\n            return;\n        }\n\n        dispatch(addContact(contact));\n    };\n    \n    const changeFilter = event => {\n        dispatch(updateFiter(event.currentTarget.value));\n    };\n    \n    return (\n        \n        <div>\n            <Helmet>\n                <title>Contacts</title>\n            </Helmet>\n\n            <ContactForm onSubmit={formSubmitHandler} />\n\n            {isLoadingContacts && <h3>Loading...</h3>}\n\n            <Filter value={filter} onChange={changeFilter} />\n            <ContactList contacts={filteredContacts} />\n            \n        </div>\n    ); \n};"],"names":["BoxSx","children","sx","display","padding","textAlign","margin","marginTop","justifyContent","alignItems","width","height","backgroundColor","borderRadius","contact","dispatch","useDispatch","id","name","number","ListItem","ListItemAvatar","Avatar","ContactPhone","ListItemText","primary","secondary","Button","type","onClick","deleteContact","variant","startIcon","Delete","FolderList","List","maxWidth","bgcolor","contacts","map","Label","styled","InfoInput","Field","InfoForm","Form","ErrorInfo","ErrorMessage","schema","yup","shape","required","initialValues","onSubmit","Box","values","resetForm","validationSchema","autoComplete","htmlFor","component","endIcon","PersonAddAlt1","FilterBox","value","onChange","TextField","label","Contacts","isLoadingContacts","useSelector","contactsSelectors","filteredContacts","filter","useEffect","fetchContacts","Helmet","data","nameExists","find","toLowerCase","alert","addContact","event","updateFiter","currentTarget"],"sourceRoot":""}